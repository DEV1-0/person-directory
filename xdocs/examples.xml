<?xml version="1.0"?>
<document url="http://www.uportal.org/index.xml">
    <properties>
        <author email="edalquist@unicon.net">Eric Dalquist</author>
        <title>Examples</title>
    </properties>
    
    <body>
        <section name="Code Configuration Example">
            <p>
                A basic example configured using Java code. This is not
                the recomended way to use a IPersonAttributeDao.
            </p>
            <source>
final String queryAttr = "uid";

//Create a new LdapPersonAttributeDaoImpl instance to use as the DAO.
final LdapPersonAttributeDaoImpl ldapAttrDao = new LdapPersonAttributeDaoImpl();

//Create attribute name mappings 
final Map ldapAttribsToPortalAttribs = new HashMap();
ldapAttribsToPortalAttribs.put("mail", "email");
ldapAttrDao.setLdapAttributesToPortalAttributes(ldapAttribsToPortalAttribs);

//Create the LdapContext to connect to the LDAP server
final Hashtable env = new Hashtable();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL, "ldap://mrfrumble.its.yale.edu:389/o=yale.edu");
final LdapContext ldapContext = new InitialLdapContext(env, null);
ldapAttrDao.setLdapContext(ldapContext);

//Create the List of attributes used in the query
final List queryAttrList = new LinkedList();
queryAttrList.add(queryAttr);
ldapAttrDao.setQueryAttributes(queryAttrList);

//Set the query to use
ldapAttrDao.setQuery("(uid={0})");

//The query map sets the attribute values to use when running the query
final Map queryMap = new HashMap();
queryMap.put(queryAttr, "awp9");

//Execute the query against using the dao
final Map resultAttributes = ldapAttrDao.getUserAttributes(queryMap);
            </source>
        </section>
        
        <section name="Spring Configuration Example">
            <p>
                The same result as above but this time configured in a spring
                bean config XML file.  
            </p>
            <source>
&lt;bean id="uPortalLdapAttributeSource" class="org.jasig.portal.services.persondir.support.LdapPersonAttributeDaoImpl"&gt;
    &lt;property name="ldapContext"&gt;
        &lt;bean class="javax.naming.ldap.InitialLdapContext"&gt;
            &lt;constructor-arg index="0"&gt;
                &lt;map&gt;
                    &lt;entry key="java.naming.factory.initial" value="com.sun.jndi.ldap.LdapCtxFactory"/&gt;
                    &lt;entry key="java.naming.provider.url" value="ldap://mrfrumble.its.yale.edu:389/o=yale.edu"/&gt;
                &lt;/map&gt;
            &lt;/constructor-arg&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="queryAttributes"&gt;
        &lt;list&gt;
            &lt;value&gt;uid&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="query"&gt;
        &lt;value&gt;(cn={0})&lt;/value&gt;
    &lt;/property&gt;
    &lt;property name="ldapAttributesToPortalAttributes"&gt;
        &lt;map&gt;
            &lt;entry key="mail"&gt;    &lt;value&gt;email&lt;/value&gt;&lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;
            </source>
            <p>
                While a bit longer than doing the work in code this can be much
                more flexible as your code only needs to deal with the IPersonAttributeDao
                interface and doesn't have to deal with any configuration.
            </p>
        </section>
    </body>
</document>
